# ==================================================================================== #
# HELPERS
# ==================================================================================== #
## help: print this help message
.PHONY: help
help:
	@echo 'Usage:'
	@sed -n 's/^##//p' ${MAKEFILE_LIST} | column -t -s ':' | sed -e 's/^/ /'

.PHONY: confirm
confirm:
	@echo -n 'Are you sure? [y/N] ' && read ans && [ $${ans:-N} = y ]

# ==================================================================================== #
# VARIABLES
# ==================================================================================== #
## Get the Git commit hash and version based on it
GIT_COMMIT = $(shell git rev-parse --short HEAD)
VERSION = $(shell git describe --tags --always --dirty)
NEXUS_PASSWORD ?= Baby78697869 # Get password from environment
NEXUS_USERNAME ?= repoworker
NEXUS_URL ?= http://192.168.1.46:8081/repository/golang-binary-repo/
NEXUS_DOCKER_IP ?= 192.168.1.46:8083
NEXUS_DOCKER_REPO ?= docker-hub-repo
REPOSITORY ?=golang-binary-repo
PROJECT_KEY ?= Movie-Api
PROJECT_NAME ?= Golang-json-Api
ARTIFACT_NAME ?= api
ARTIFACT_PATH ?= /home/devworkspace/Desktop/Go-Workspace/src/Advanced-Patterns-For-Building-Json-Apis-and-web-applicattions/greenlight/bin/api
DOCKER_IMAGE = $(NEXUS_DOCKER_IP)/$(NEXUS_DOCKER_REPO)/$(ARTIFACT_NAME):$(VERSION)

# Set a default Dockerfile if not provided
dockerfile ?= movieApi.dockerfile  # Default to Dockerfile if not specified

# ==================================================================================== #
# DEVELOPMENT
# ==================================================================================== #
## run/api: run the cmd/api application
.PHONY: run/api
run/api:
	go run ./cmd/api -db-dsn=${GREENLIGHT_DB_DSN}

## db/psql: connect to the database using psql
.PHONY: db/psql
db/psql:
	psql ${GREENLIGHT_DB_DSN}

## db/migrations/new name=$1: create a new database migration
.PHONY: db/migrations/new
db/migrations/new:
	@echo 'Creating migration files for ${name}...'
	migrate create -seq -ext=.sql -dir=./migrations ${name}

## db/migrations/up: apply all up database migrations
.PHONY: db/migrations/up
db/migrations/up: confirm
	@echo 'Running up migrations...'
	migrate -path ./migrations -database ${GREENLIGHT_DB_DSN} up

# ==================================================================================== #
# QUALITY CONTROL
# ==================================================================================== #
## audit: tidy dependencies and format, vet and test all code
.PHONY: audit
audit: vendor
	@echo 'Formatting code...'
	go fmt ./...
	@echo 'Vetting code...'
	go vet ./...
	staticcheck ./...
	@echo 'Running tests...'
	go test -race -vet=off ./...

## vendor: tidy and vendor dependencies
.PHONY: vendor
vendor:
	@echo 'Tidying and verifying module dependencies...'
	go mod tidy
	go mod verify
	@echo 'Vendoring dependencies...'
	go mod vendor

# ==================================================================================== #
# BUILD
# ==================================================================================== #
## build/api: build the cmd/api application
current_time = $(shell date --iso-8601=seconds)
git_description = $(shell git describe --always --dirty --tags --long)
linker_flags = '-s -X main.buildTime=${current_time} -X main.version=${git_description}'

## build/api: build the cmd/api application
.PHONY: build/api
build/api:
	@echo 'Building cmd/api...'
	go build -ldflags=${linker_flags} -o=./bin/api ./cmd/api
	GOOS=linux GOARCH=amd64 go build -ldflags=${linker_flags} -o=./bin/linux_amd64/api ./cmd/api

# ==================================================================================== #
# DOCKER OPERATIONS
# ==================================================================================== #
# Docker repository login
.PHONY: login-to-nexus-docker
login-to-nexus-docker:
	@docker login -u ${NEXUS_USERNAME} -p ${NEXUS_PASSWORD} ${NEXUS_DOCKER_IP}

# Build Docker image with specified Dockerfile, tag, and version
.PHONY: docker-build
docker-build: build/api
	@echo "Building Docker image with ${dockerfile}..."
	@docker build -f ${dockerfile} -t ${DOCKER_IMAGE} .
	@echo "Docker image ${DOCKER_IMAGE} built successfully."

# Tag Docker image with Nexus repository
.PHONY: docker-tag-with-repo
docker-tag-with-repo: docker-build
	@docker tag ${DOCKER_IMAGE} ${NEXUS_DOCKER_IP}/${NEXUS_DOCKER_REPO}/${ARTIFACT_NAME}:$(VERSION)
	@echo "Docker image tagged as ${NEXUS_DOCKER_IP}/${NEXUS_DOCKER_REPO}/${ARTIFACT_NAME}:$(VERSION)."

# Push Docker image to Docker Hub via Nexus URL
.PHONY: docker-push
docker-push: docker-tag-with-repo
	@docker push ${NEXUS_DOCKER_IP}/${NEXUS_DOCKER_REPO}/${ARTIFACT_NAME}:$(VERSION)
	@echo "Docker image ${NEXUS_DOCKER_IP}/${NEXUS_DOCKER_REPO}/${ARTIFACT_NAME}:$(VERSION) pushed successfully to Docker Hub."

# Raw file upload to Nexus
.PHONY: raw-push
raw-push: build/api
	@curl -u $(NEXUS_USERNAME):$(NEXUS_PASSWORD) \
		--upload-file $(ARTIFACT_PATH) \
		"$(NEXUS_URL)/$(PROJECT_KEY)/$(PROJECT_NAME)/$(VERSION)/$(ARTIFACT_NAME)" \
		--fail --silent --show-error || { echo "Failed to upload $(ARTIFACT_NAME). Please check the credentials, URL, and Nexus server logs."; exit 1; }
	@echo "$(ARTIFACT_NAME) version $(VERSION) published successfully to Nexus."

# Combined publish target for Docker and raw artifact
.PHONY: publish
publish: docker-push raw-push

# Clean up generated artifacts (optional)
.PHONY: clean
clean:
	@echo "Cleaning up generated files..."
	rm -rf ./bin/* ./migrations/*.sql
	@echo "Cleaned up generated files."

# Print configuration (for debugging purposes)
.PHONY: info
info:
	@echo "Nexus Username: $(NEXUS_USERNAME)"
	@echo "Nexus URL: $(NEXUS_URL)"
	@echo "Repository: $(REPOSITORY)"
	@echo "Project Key: $(PROJECT_KEY)"
	@echo "Project Name: $(PROJECT_NAME)"
	@echo "Version: $(VERSION)"
	@echo "Artifact Name: $(ARTIFACT_NAME)"
	@echo "Artifact Path: $(ARTIFACT_PATH)"
	@echo "Git Commit: $(GIT_COMMIT)"
	@echo "Dockerfile: ${dockerfile}"

# Default target
.PHONY: help login-to-nexus-docker build/api docker-build docker-tag-with-repo docker-push raw-push publish clean info
